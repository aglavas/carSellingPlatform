<?php

namespace Tests\Feature;

use App\Company;
use App\StockVehicle;
use App\User;
use Illuminate\Support\Facades\Config;
use Tests\TestCase;

class VehicleUploadApiTest extends TestCase
{
    /**
     * @var User
     */
    public $user;

    /**
     * @var Company
     */
    public $company;

    /**
     * @var string
     */
    public $token;

    /**
     * When running tests comment out file validation rule in VehicleImportRequest
     */
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $user = User::factory(['stock_type' => 'UC'])
        ->has(Company::factory())
        ->create();

        $user->load('company');

        $this->user = $user;
        $this->company = $this->user->company;
        $this->token = $user->api_token;

        StockVehicle::truncate();
    }


    ///Autosphere fail tests

    /**
     * * @test
     */
    public function autoSphereApiRoleFailTest()
    {
        Config::set('carmarket.imports.used.cz.mappings.company_data.company_id', $this->company->id);

        $this->artisan('import:vehicles:cz')
            ->expectsOutput('User is not seller.');
    }

    /**
     * * @test
     */
    public function autoSphereMalformedUserTest()
    {
        Config::set('carmarket.imports.used.cz.mappings.company_data.company_id', $this->company->id);

        $this->user->vehicle_type = null;
        $this->user->save();

        $this->artisan('import:vehicles:cz')
            ->expectsOutput('Company, user and vehicle type should be preset.');
    }

    /**
     * * @test
     */
    public function autoSphereWrongCountryTest()
    {
        Config::set('carmarket.imports.used.cz.mappings.company_data.company_id', $this->company->id);

        $this->user->country = 'SI';
        $this->user->save();

        $this->user->assignRole('Uploader');

        $this->artisan('import:vehicles:cz')
            ->expectsOutput('User is not from CZ.');
    }

    ///DE fail tests

    /**
     * * @test
     */
    public function deApiRoleFailTest()
    {
        Config::set('carmarket.imports.used.de.mappings.company_data.company_id', $this->company->id);

        $this->artisan('import:vehicles:de')
            ->expectsOutput('User is not seller.');
    }

    /**
     * * @test
     */
    public function deMalformedUserTest()
    {
        Config::set('carmarket.imports.used.de.mappings.company_data.company_id', $this->company->id);

        $this->user->vehicle_type = null;
        $this->user->save();

        $this->artisan('import:vehicles:de')
            ->expectsOutput('Company, user and vehicle type should be preset.');
    }

    /**
     * * @test
     */
    public function deWrongCountryTest()
    {
        Config::set('carmarket.imports.used.de.mappings.company_data.company_id', $this->company->id);

        $this->user->country = 'SI';
        $this->user->save();

        $this->user->assignRole('Uploader');

        $this->artisan('import:vehicles:de')
            ->expectsOutput('User is not from DE.');
    }

    ///NL fail tests

    /**
     * * @test
     */
    public function nlApiRoleFailTest()
    {
        Config::set('carmarket.imports.used.nl.mappings.31300.klantnummer', $this->company->id);

        $this->artisan('import:vehicles:nl')
            ->expectsOutput('User is not seller.');
    }

    /**
     * * @test
     */
    public function nlMalformedUserTest()
    {
        Config::set('carmarket.imports.used.nl.mappings.31300.klantnummer', $this->company->id);

        $this->user->vehicle_type = null;
        $this->user->save();

        $this->artisan('import:vehicles:nl')
            ->expectsOutput('Company, user and vehicle type should be preset.');
    }

    /**
     * * @test
     */
    public function nlWrongCountryTest()
    {
        Config::set('carmarket.imports.used.nl.mappings.31300.klantnummer', $this->company->id);

        $this->user->country = 'SI';
        $this->user->save();

        $this->user->assignRole('Uploader');

        $this->artisan('import:vehicles:nl')
            ->expectsOutput('User is not from NL.');
    }
}
