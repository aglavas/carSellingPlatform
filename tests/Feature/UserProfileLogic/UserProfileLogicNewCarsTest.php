<?php

namespace Tests\Feature\VehicleUploadUserTypes;

use App\Company;
use App\StockVehicle;
use App\User;
use Illuminate\Http\UploadedFile;
use Tests\TestCase;
use App\Brand;

class UserProfileLogicNewCarsTest extends TestCase
{
    /**
     * @var User
     */
    public $ncUser;

    /**
     * @var Company
     */
    public $ncCompany;

    /**
     * @var string
     */
    public $ncCountry;

    /**
     * @var User
     */
    public $ucUser;

    /**
     * @var Company
     */
    public $ucCompany;

    /**
     * @var string
     */
    public $ucCountry;

    /**
     * When running tests comment out file validation rule in VehicleImportRequest
     */
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        StockVehicle::truncate();

        $this->ucUser = User::factory(['stock_type' => 'UC', 'vehicle_type' => ['Truck']])
            ->has(Company::factory())
            ->create();

        $this->ucUser->load('company');

        $ucCompany = $this->ucUser->company;
        $ucCountry = $this->ucUser->getCountry();

        $vehicleCollection = StockVehicle::withoutEvents(function () use ($ucCountry, $ucCompany) {
            return StockVehicle::factory([
                'company_id' => $ucCompany->id,
                'company' => $ucCompany->name,
                'country' => $ucCountry,
                'condition_type' => 'used'
            ])->count(5)->create();
        });

        $this->ucCompany = $ucCompany;
        $this->ucCountry = $ucCountry;

        ////NC

        $this->ncUser = User::factory(['stock_type' => 'NC', 'vehicle_type' => ['Truck']])
            ->has(Company::factory())
            ->create();

        $this->ncUser->load('company');

        $brand = Brand::firstOrCreate(['name' => 'FIAT']);

        $this->ncUser->brands()->attach($brand->id);

        $ncCompany = $this->ncUser->company;
        $ncCountry = $this->ncUser->getCountry();

        $vehicleCollection = StockVehicle::withoutEvents(function () use ($ncCountry, $ncCompany) {
            return StockVehicle::factory([
                'company_id' => $ncCompany->id,
                'company' => $ncCompany->name,
                'country' => $ncCountry,
                'condition_type' => 'new',
                'brand' => 'FIAT',
                'vehicle_type' => 'Truck',
            ])->count(5)->create();
        });

        $this->ncCompany = $ncCompany;
        $this->ncCountry = $ncCountry;
    }

    /**
     * * @test
     */
    public function NCImportSuccessTest()
    {
        $user = User::factory(['stock_type' => 'NC', 'import_types' => 'IR', 'vehicle_type' => ['Passenger', 'LCV']])
            ->has(Company::factory())
            ->create();

        $user->load('company');

        $user->assignRole('Uploader');

        $brand = Brand::firstOrCreate(['name' => 'BMW']);

        $user->brands()->attach($brand->id);

        $token = $user->api_token;

        $filePath = storage_path("test-lists") . "/unified_list_valid_nc.xlsx";

        $file = new \Symfony\Component\HttpFoundation\File\UploadedFile ($filePath, 'unified_list_valid_nc.xlsx', null, null, true);

        $finalFile = UploadedFile::createFromBase($file);

        $rawBody['file'] = $finalFile;

        $response = $this->actingAs($user)
            ->post("/api/v1/vehicle/import", $rawBody, [
                "Accept" => "application/json",
                "Content-Type" => "multipart/form-data",
                "Authorization" => "Bearer $token"
            ]);

        $response->assertStatus(201);

        $response->assertJsonFragment([
            'status' => 'success',
            'message' => 'Upload successful.',
        ]);

        $this->assertDatabaseHas('stock_vehicles', [
            'manufacturer_id' => 'WBA7K310407F25511'
        ]);

        $this->assertDatabaseHas('stock_vehicles', [
            'manufacturer_id' => 'WBA7K310307F19622'
        ]);

        $this->assertDatabaseHas('stock_vehicles', [
            'manufacturer_id' => 'WBS1J51080VA11733'
        ]);

        $this->assertDatabaseHas('stock_vehicles', [
            'manufacturer_id' => 'WBA6Y310307D40844'
        ]);

        $this->assertDatabaseHas('stock_vehicles', [
            'manufacturer_id' => 'WCS1J51080VA11733'
        ]);

        $this->assertDatabaseHas('stock_vehicles', [
            'manufacturer_id' => 'WDA6Y310307D40844'
        ]);

        $rawBody['file'] = $finalFile;

        $response = $this->actingAs($user)
            ->post("/api/v1/vehicle/import", $rawBody, [
                "Accept" => "application/json",
                "Content-Type" => "multipart/form-data",
                "Authorization" => "Bearer $token"
            ]);

        $response->assertStatus(201);

        $response->assertJsonFragment([
            'status' => 'success',
            'message' => 'Upload successful.',
        ]);

        $this->assertDatabaseCount('stock_vehicles', 16);
    }

    /**
     * * @test
     */
    public function UCImportUsedNewSuccessTest()
    {
        $user = User::factory(['stock_type' => 'NC', 'import_types' => 'IR', 'vehicle_type' => ['Passenger', 'LCV']])
            ->has(Company::factory())
            ->create();

        $user->load('company');

        $user->assignRole('Uploader');

        $brand = Brand::firstOrCreate(['name' => 'BMW']);

        $user->brands()->attach($brand->id);

        $token = $user->api_token;

        $filePath = storage_path("test-lists") . "/unified_list_valid_uc_nc.xlsx";

        $file = new \Symfony\Component\HttpFoundation\File\UploadedFile ($filePath, 'unified_list_valid_uc_nc.xlsx', null, null, true);

        $finalFile = UploadedFile::createFromBase($file);

        $rawBody['file'] = $finalFile;

        $response = $this->actingAs($user)
            ->post("/api/v1/vehicle/import", $rawBody, [
                "Accept" => "application/json",
                "Content-Type" => "multipart/form-data",
                "Authorization" => "Bearer $token"
            ]);

        $responseData = $response->getOriginalContent();

        $validationErrors = $responseData['errors'];

        $validationErrorsArray = $this->parseValidationErrorArray($validationErrors);

        $response->assertJsonFragment([
            'status' => 'partial import',
            'message' => 'Upload partially successful. There were errors during the upload.',
        ]);

        $validationErrorsArrayCount = count($validationErrorsArray);

        $this->assertEquals(3, $validationErrorsArrayCount);

        $this->assertDatabaseHas('stock_vehicles', [
            'manufacturer_id' => 'WBA6Y310307D40844'
        ]);

        $this->assertDatabaseHas('stock_vehicles', [
            'manufacturer_id' => 'WCS1J51080VA11733'
        ]);

        $this->assertDatabaseHas('stock_vehicles', [
            'manufacturer_id' => 'WDA6Y310307D40844'
        ]);

        $this->assertDatabaseCount('stock_vehicles', 13);
    }

    /**
     * * @test
     */
    public function NCImportUserOverWriteOtherNCUserSuccess()
    {
        $user = User::factory(['stock_type' => 'NC', 'import_types' => 'IR', 'company_id' => $this->ncCompany->id, 'country' => strtoupper($this->ncCountry), 'vehicle_type' => ['Truck']])
                ->create();

        $user->load('company');

        $user->assignRole('Uploader');

        $brand = Brand::firstOrCreate(['name' => 'FIAT']);

        $user->brands()->attach($brand->id);

        $token = $user->api_token;

        $filePath = storage_path("test-lists") . "/unified_list_valid_nc_fiat.xlsx";

        $file = new \Symfony\Component\HttpFoundation\File\UploadedFile ($filePath, 'unified_list_valid_nc_fiat.xlsx', null, null, true);

        $finalFile = UploadedFile::createFromBase($file);

        $rawBody['file'] = $finalFile;

        $response = $this->actingAs($user)
            ->post("/api/v1/vehicle/import", $rawBody, [
                "Accept" => "application/json",
                "Content-Type" => "multipart/form-data",
                "Authorization" => "Bearer $token"
            ]);

        $response->assertStatus(201);

        $response->assertJsonFragment([
            'status' => 'success',
            'message' => 'Upload successful.',
        ]);

        $this->assertDatabaseHas('stock_vehicles', [
            'manufacturer_id' => 'WBA7K310407F25511'
        ]);

        $this->assertDatabaseHas('stock_vehicles', [
            'manufacturer_id' => 'WBA7K310307F19622'
        ]);

        $this->assertDatabaseHas('stock_vehicles', [
            'manufacturer_id' => 'WBS1J51080VA11733'
        ]);

        $this->assertDatabaseHas('stock_vehicles', [
            'manufacturer_id' => 'WBA6Y310307D40844'
        ]);

        $this->assertDatabaseHas('stock_vehicles', [
            'manufacturer_id' => 'WCS1J51080VA11733'
        ]);

        $this->assertDatabaseHas('stock_vehicles', [
            'manufacturer_id' => 'WDA6Y310307D40844'
        ]);

        $this->assertDatabaseCount('stock_vehicles', 11);
    }

    /**
     * * @test
     */
    public function NCImportVehicleTypeSuccess()
    {
        //Additional user

        User::factory(['stock_type' => 'NC', 'import_types' => 'IR', 'company_id' => $this->ncCompany->id, 'country' => strtoupper($this->ncCountry), 'vehicle_type' => ['LCV']])
            ->create();

        $this->ncUser->load('company');

        $brand = Brand::firstOrCreate(['name' => 'FIAT']);

        $this->ncUser->brands()->attach($brand->id);

        $ncCompany = $this->ncCompany;
        $ncCountry = $this->ncCountry;

        $vehicleCollection = StockVehicle::withoutEvents(function () use ($ncCountry, $ncCompany) {
            return StockVehicle::factory([
                'company_id' => $ncCompany->id,
                'company' => $ncCompany->name,
                'country' => $ncCountry,
                'condition_type' => 'new',
                'brand' => 'FIAT',
                'vehicle_type' => 'LCV',
            ])->count(5)->create();
        });


        /////////////////////////////////


        $user = User::factory(['stock_type' => 'NC', 'import_types' => 'IR', 'company_id' => $this->ncCompany->id, 'country' => strtoupper($this->ncCountry), 'vehicle_type' => ['Passenger' ,'Truck']])
            ->create();

        $user->load('company');

        $user->assignRole('Uploader');

        $brand = Brand::firstOrCreate(['name' => 'FIAT']);

        $user->brands()->attach($brand->id);

        $token = $user->api_token;

        $filePath = storage_path("test-lists") . "/unified_list_valid_nc_fiat_passenger_truck.xlsx";

        $file = new \Symfony\Component\HttpFoundation\File\UploadedFile ($filePath, 'unified_list_valid_nc_fiat_passenger_truck.xlsx', null, null, true);

        $finalFile = UploadedFile::createFromBase($file);

        $rawBody['file'] = $finalFile;

        $response = $this->actingAs($user)
            ->post("/api/v1/vehicle/import", $rawBody, [
                "Accept" => "application/json",
                "Content-Type" => "multipart/form-data",
                "Authorization" => "Bearer $token"
            ]);

        $response->assertStatus(201);

        $response->assertJsonFragment([
            'status' => 'success',
            'message' => 'Upload successful.',
        ]);

        $this->assertDatabaseHas('stock_vehicles', [
            'manufacturer_id' => 'WBA7K310407F25511'
        ]);

        $this->assertDatabaseHas('stock_vehicles', [
            'manufacturer_id' => 'WBA7K310307F19622'
        ]);

        $this->assertDatabaseHas('stock_vehicles', [
            'manufacturer_id' => 'WBS1J51080VA11733'
        ]);

        $this->assertDatabaseHas('stock_vehicles', [
            'manufacturer_id' => 'WBA6Y310307D40844'
        ]);

        $this->assertDatabaseHas('stock_vehicles', [
            'manufacturer_id' => 'WCS1J51080VA11733'
        ]);

        $this->assertDatabaseHas('stock_vehicles', [
            'manufacturer_id' => 'WDA6Y310307D40844'
        ]);

        $this->assertDatabaseCount('stock_vehicles', 16);
    }

    /**
     * * @test
     */
    public function NCImportBrandSuccess()
    {
        //Additional user

        User::factory(['stock_type' => 'NC', 'import_types' => 'IR', 'company_id' => $this->ncCompany->id, 'country' => strtoupper($this->ncCountry), 'vehicle_type' => ['LCV']])
            ->create();

        $this->ncUser->load('company');

        $brand = Brand::firstOrCreate(['name' => 'OPEL']);

        $this->ncUser->brands()->attach($brand->id);

        $ncCompany = $this->ncCompany;
        $ncCountry = $this->ncCountry;

        $vehicleCollection = StockVehicle::withoutEvents(function () use ($ncCountry, $ncCompany) {
            return StockVehicle::factory([
                'company_id' => $ncCompany->id,
                'company' => $ncCompany->name,
                'country' => $ncCountry,
                'condition_type' => 'new',
                'brand' => 'OPEL',
                'vehicle_type' => 'LCV',
            ])->count(5)->create();
        });


        /////////////////////////////////


        $user = User::factory(['stock_type' => 'NC', 'import_types' => 'IR', 'company_id' => $this->ncCompany->id, 'country' => strtoupper($this->ncCountry), 'vehicle_type' => ['Passenger', 'Truck', 'LCV']])
            ->create();

        $user->load('company');

        $user->assignRole('Uploader');

        $brand = Brand::firstOrCreate(['name' => 'MERCEDES']);

        $user->brands()->attach($brand->id);

        $brand = Brand::firstOrCreate(['name' => 'OPEL']);

        $user->brands()->attach($brand->id);

        $token = $user->api_token;

        $filePath = storage_path("test-lists") . "/unified_list_valid_nc_brand_mercedes_opel.xlsx";

        $file = new \Symfony\Component\HttpFoundation\File\UploadedFile ($filePath, 'unified_list_valid_nc_brand_mercedes_opel.xlsx', null, null, true);

        $finalFile = UploadedFile::createFromBase($file);

        $rawBody['file'] = $finalFile;

        $response = $this->actingAs($user)
            ->post("/api/v1/vehicle/import", $rawBody, [
                "Accept" => "application/json",
                "Content-Type" => "multipart/form-data",
                "Authorization" => "Bearer $token"
            ]);

        $response->assertStatus(201);

        $response->assertJsonFragment([
            'status' => 'success',
            'message' => 'Upload successful.',
        ]);

        $this->assertDatabaseHas('stock_vehicles', [
            'manufacturer_id' => 'WBA7K310407F25511'
        ]);

        $this->assertDatabaseHas('stock_vehicles', [
            'manufacturer_id' => 'WBA7K310307F19622'
        ]);

        $this->assertDatabaseHas('stock_vehicles', [
            'manufacturer_id' => 'WBS1J51080VA11733'
        ]);

        $this->assertDatabaseHas('stock_vehicles', [
            'manufacturer_id' => 'WBA6Y310307D40844'
        ]);

        $this->assertDatabaseHas('stock_vehicles', [
            'manufacturer_id' => 'WCS1J51080VA11733'
        ]);

        $this->assertDatabaseHas('stock_vehicles', [
            'manufacturer_id' => 'WDA6Y310307D40844'
        ]);

        $this->assertDatabaseCount('stock_vehicles', 16);
    }
}
