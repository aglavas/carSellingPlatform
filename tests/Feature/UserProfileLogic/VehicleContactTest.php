<?php

namespace Tests\Feature\VehicleUploadUserTypes;

use App\Company;
use App\StockVehicle;
use App\User;
use Illuminate\Http\UploadedFile;
use Tests\TestCase;
use App\Brand;

class VehicleContactTest extends TestCase
{
    /**
     * @var User
     */
    public $ucUser;

    /**
     * @var User
     */
    public $ncUser;

    /**
     * @var Company
     */
    public $ucCompany;

    /**
     * @var Company
     */
    public $ncCompany;

    /**
     * @var String
     */
    public $ucCountry;

    /**
     * @var String
     */
    public $ncCountry;


    /**
     * When running tests comment out file validation rule in VehicleImportRequest
     */
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        StockVehicle::truncate();

        $this->ucUser = User::factory(['stock_type' => 'UC', 'vehicle_type' => ['Truck']])
            ->has(Company::factory())
            ->create();

        $this->ucUser->load('company');

        $ucCompany = $this->ucUser->company;
        $ucCountry = $this->ucUser->getCountry();

        $vehicleCollection = StockVehicle::withoutEvents(function () use ($ucCountry, $ucCompany) {
            return StockVehicle::factory([
                'company_id' => $ucCompany->id,
                'company' => $ucCompany->name,
                'country' => $ucCountry,
                'condition_type' => 'used',
                'vehicle_type' => 'Truck'
            ])->count(5)->create();
        });

        $this->ucCompany = $ucCompany;
        $this->ucCountry = $ucCountry;

        ////NC

        $this->ncUser = User::factory(['stock_type' => 'NC', 'vehicle_type' => ['LCV']])
            ->has(Company::factory())
            ->create();

        $this->ncUser->load('company');

        $brand = Brand::firstOrCreate(['name' => 'FIAT']);

        $this->ncUser->brands()->attach($brand->id);

        $ncCompany = $this->ncUser->company;
        $ncCountry = $this->ncUser->getCountry();

        $vehicleCollection = StockVehicle::withoutEvents(function () use ($ncCountry, $ncCompany) {
            return StockVehicle::factory([
                'company_id' => $ncCompany->id,
                'company' => $ncCompany->name,
                'country' => $ncCountry,
                'condition_type' => 'new',
                'brand' => 'FIAT',
                'vehicle_type' => 'LCV',
            ])->count(5)->create();
        });

        $this->ncCompany = $ncCompany;
        $this->ncCountry = $ncCountry;
    }

    /**
     * @test
     */
    public function testVehicleContactUC()
    {
        $vehicle = StockVehicle::where('company_id', $this->ucCompany->id)->first();

        $contactCollection = $vehicle->sellerContacts();

        $this->assertCount(0, $contactCollection);

        User::factory(['stock_type' => 'UC', 'company_id' => $this->ucCompany->id, 'country' => strtoupper($this->ucCountry)])
            ->create();

        $contactCollection = $vehicle->sellerContacts();

        $this->assertCount(0, $contactCollection);

        $user = User::factory(['stock_type' => 'UC', 'company_id' => $this->ucCompany->id, 'country' => strtoupper($this->ucCountry)])
            ->create();

        $user->assignRole('Logistics');

        $contactCollection = $vehicle->sellerContacts();

        $this->assertCount(1, $contactCollection);
    }

    /**
     * @test
     */
    public function testVehicleContactNC()
    {
        $vehicle = StockVehicle::where('company_id', $this->ncCompany->id)->first();

        $contactCollection = $vehicle->sellerContacts();

        $this->assertCount(0, $contactCollection);

        User::factory(['stock_type' => 'NC', 'company_id' => $this->ncCompany->id, 'country' => strtoupper($this->ncCountry)])
            ->create();

        $contactCollection = $vehicle->sellerContacts();

        $this->assertCount(0, $contactCollection);

        $user = User::factory(['stock_type' => 'NC', 'company_id' => $this->ncCompany->id, 'country' => strtoupper($this->ncCountry)])
            ->create();

        $user->assignRole('Logistics');

        $contactCollection = $vehicle->sellerContacts();

        $this->assertCount(0, $contactCollection);

        $user = User::factory(['stock_type' => 'NC', 'company_id' => $this->ncCompany->id, 'country' => strtoupper($this->ncCountry), 'vehicle_type' => ['LCV', 'Passenger']])
            ->create();

        $user->assignRole('Logistics');

        $contactCollection = $vehicle->sellerContacts();

        $this->assertCount(0, $contactCollection);

        $user = User::factory(['stock_type' => 'NC', 'company_id' => $this->ncCompany->id, 'country' => strtoupper($this->ncCountry), 'vehicle_type' => ['LCV', 'Passenger']])
            ->create();

        $user->assignRole('Logistics');

        $brand = Brand::firstOrCreate(['name' => 'BMW']);

        $user->brands()->attach($brand->id);

        $contactCollection = $vehicle->sellerContacts();

        $this->assertCount(0, $contactCollection);

        $user = User::factory(['stock_type' => 'NC', 'company_id' => $this->ncCompany->id, 'country' => strtoupper($this->ncCountry), 'vehicle_type' => ['LCV', 'Passenger']])
            ->create();

        $user->assignRole('Logistics');

        $brand = Brand::firstOrCreate(['name' => 'BMW']);

        $user->brands()->attach($brand->id);

        $brand = Brand::firstOrCreate(['name' => 'FIAT']);

        $user->brands()->attach($brand->id);

        $contactCollection = $vehicle->sellerContacts();

        $this->assertCount(1, $contactCollection);

        $user = User::factory(['stock_type' => 'NC', 'company_id' => $this->ncCompany->id, 'country' => strtoupper($this->ncCountry), 'vehicle_type' => ['Truck']])
            ->create();

        $user->assignRole('Logistics');

        $brand = Brand::firstOrCreate(['name' => 'BMW']);

        $user->brands()->attach($brand->id);

        $brand = Brand::firstOrCreate(['name' => 'FIAT']);

        $user->brands()->attach($brand->id);

        $contactCollection = $vehicle->sellerContacts();

        $this->assertCount(1, $contactCollection);
    }
}
