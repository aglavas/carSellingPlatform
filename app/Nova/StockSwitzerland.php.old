<?php

namespace App\Nova;

use App\Nova\Filters\OptionsSelect;
use App\Nova\Filters\RangeFilter;
use DigitalCreative\MegaFilter\Column;
use DigitalCreative\MegaFilter\HasMegaFilterTrait;
use DigitalCreative\MegaFilter\MegaFilter;
use Illuminate\Http\Request;
use Laravel\Nova\Fields\Boolean;
use Laravel\Nova\Fields\Date;
use Laravel\Nova\Fields\ID;
use Laravel\Nova\Fields\Text;
use Maatwebsite\LaravelNovaExcel\Actions\DownloadExcel;

class StockSwitzerland extends Resource
{

    use HasMegaFilterTrait;

    /**
     * The model the resource corresponds to.
     *
     * @var string
     */
    public static $model = \App\StockSwitzerland::class;

    public static $group = '01 New Stock';

    /**
     * The single value that should be used to represent the resource when being displayed.
     *
     * @var string
     */
    public static $title = 'id';

    /**
     * The columns that should be searched.
     *
     * @var array
     */
    public static $search = [
        'id',
        'mandant',
        'vin',
        'model_generation',
        'model',
        'body_type',
        'equipment',
        'equipment_short_combination',
        'body_color_code',
        'body_color',
        'location',
        'ownership',
        'variable_name',
        'variable_value'
    ];

    public static function label()
    {
        return 'Switzerland';
    }

    /**
     * Get the fields displayed by the resource.
     *
     * @param \Illuminate\Http\Request $request
     * @return array
     */
    public function fields(Request $request)
    {
        return [
            ID::make()->sortable()->hideFromIndex(),
            Text::make('Mandant'),
            Text::make('Mandant Kurz'),
            Date::make('Key Date'),
            Text::make('VIN'),
            Text::make('Model Generation'),
            Text::make('Model'),
            Text::make('Body Type'),
            Text::make('Transmission Short'),
            Text::make('Transmission'),
            Text::make('Fuel'),
            Text::make('Equipment Short'),
            Text::make('Equipment Short Comb.', 'equipment_short_combination'),
            Text::make('Equipment'),
            Text::make('Equipment Comb.'),
            Text::make('Color Code', 'body_color_code'),
            Text::make('Color', 'body_color'),
            Text::make('Interior Short'),
            Text::make('Interior'),
            Text::make('Location'),
            Text::make('Ownership'),
            Text::make('Consignment'),

            Date::make('Customs On'),
            Date::make('Shipped On'),
            Date::make('Port On'),
            Date::make('Train On'),
            Date::make('PDI On'),
            Date::make('Carrier On'),
            Text::make('Var', 'variable_name'),
            Text::make('Var Value', 'variable_value'),
            Boolean::make('Duty Paid')
        ];
    }

    /**
     * Get the cards available for the request.
     *
     * @param \Illuminate\Http\Request $request
     * @return array
     */
    public function cards(Request $request)
    {
        return [
            MegaFilter::make([
                'filters' => [
                    new OptionsSelect('mandant', \App\StockSwitzerland::class),
                    new OptionsSelect('model_generation', \App\StockSwitzerland::class),
                    new OptionsSelect('model', \App\StockSwitzerland::class),
                    new OptionsSelect('body_type', \App\StockSwitzerland::class),
                    new OptionsSelect('transmission', \App\StockSwitzerland::class),
                    new OptionsSelect('fuel', \App\StockSwitzerland::class),
                    new OptionsSelect('body_color_code', \App\StockSwitzerland::class),
                    new OptionsSelect('body_color', \App\StockSwitzerland::class),
                    new OptionsSelect('location', \App\StockSwitzerland::class),
                    new OptionsSelect('ownership', \App\StockSwitzerland::class),
                    new RangeFilter('key_date', \App\StockSwitzerland::class)
                ],
                'columns' => [

                    Column::make('Mandant')->permanent(),
                    Column::make('Mandant Kurz')->permanent(),
                    Column::make('Key Date')->permanent(),
                    Column::make('VIN')->permanent(),
                    Column::make('Model Generation')->permanent(),
                    Column::make('Model')->permanent(),
                    Column::make('Body Type')->permanent(),
                    Column::make('Transmission Short')->permanent(),
                    Column::make('Transmission')->permanent(),
                    Column::make('Fuel')->permanent(),
                    Column::make('Equipment Short')->permanent(),
                    Column::make('Equipment Short Comb.', 'equipment_short_combination')->permanent(),
                    Column::make('Equipment')->permanent(),
                    Column::make('Equipment Comb.')->permanent(),
                    Column::make('Color Code', 'body_color_code')->permanent(),
                    Column::make('Color', 'body_color')->permanent(),
                    Column::make('Interior Short')->permanent(),
                    Column::make('Interior')->permanent(),
                    Column::make('Location')->permanent(),
                    Column::make('Ownership')->permanent(),
                    Column::make('Consignment')->permanent(),
                    Column::make('Customs On')->permanent(),
                    Column::make('Shipped On')->permanent(),
                    Column::make('Port On')->permanent(),
                    Column::make('Train On')->permanent(),
                    Column::make('PDI On')->permanent(),
                    Column::make('Carrier On')->permanent(),
                    Column::make('Var', 'variable_name')->permanent(),
                    Column::make('Var Value', 'variable_value')->permanent(),
                    Column::make('Duty Paid')->permanent()
                ],
                'settings' => [
                    'filtersWidth' => 'w-1/3'
                ]
            ])
        ];
    }

    /**
     * Get the filters available for the resource.
     *
     * @param \Illuminate\Http\Request $request
     * @return array
     */
    public function filters(Request $request)
    {
        return [
            /*
            (new CountrySelect())->withMeta(['selectOptions' => select_options_for(self::$model, 'country')]),
            (new FamilySelect())->withMeta(['selectOptions' => select_options_for(self::$model, 'family')]),
            (new ModelNameSelect())->withMeta(['selectOptions' => select_options_for(self::$model, 'model_name')]),
            (new ColorSelect())->withMeta(['selectOptions' => select_options_for(self::$model, 'color')]),
            (new VpvuSelect())->withMeta(['selectOptions' => select_options_for(self::$model, 'vpvu')]),
            (new Co2Select())->withMeta(['selectOptions' => select_options_for(self::$model, 'co2')]),
            new TransactionDate(),*/
        ];
    }

    /**
     * Get the lenses available for the resource.
     *
     * @param \Illuminate\Http\Request $request
     * @return array
     */
    public function lenses(Request $request)
    {
        return [];
    }

    /**
     * Get the actions available for the resource.
     *
     * @param \Illuminate\Http\Request $request
     * @return array
     */
    public function actions(Request $request)
    {
        return [
            (new DownloadExcel)->withHeadings()->allFields(),
        ];
    }
}
